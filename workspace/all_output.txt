To create a unit test for your 'Hello, World!' console application, you would use a testing framework such as NUnit or xUnit. 

Here's an example using NUnit and Moq to test if "Hello, World!" is written to the console. The Console is a system resource so we'll create an IConsole interface to mock it during tests:

First, we need to redefine our Program class to make it testable. Here is an example:

```csharp
using System;

namespace HelloWorld 
{
    public interface IConsole
    {
        void WriteLine(string message);
    }

    public class ConsoleWrapper : IConsole
    {
        public void WriteLine(string message)
        {
            Console.WriteLine(message);
        }
    }

    public class Program
    {
        private IConsole _console;

        public Program(IConsole console)
        {
            _console = console;
        }

        public void Run()
        {
            _console.WriteLine("Hello, World!");
        }

        static void Main(string[] args)
        {
            var program = new Program(new ConsoleWrapper());
            program.Run();
        }
    }
}
```

Now, you can create a unit test like this:

```csharp
using Moq;
using NUnit.Framework;

namespace HelloWorld.Tests
{
    public class ProgramTests
    {
        [Test]
        public void Hello_World_Is_Written_To_Console()
        {
            var consoleMock = new Mock<IConsole>();
            var program = new Program(consoleMock.Object);

            program.Run();

            consoleMock.Verify(c => c.WriteLine("Hello, World!"), Times.Once);
        }
    }
}
```

This unit test verifies that the `WriteLine` method of our `IConsole` mock object was called once with the argument "Hello, World!". If the console application is working as expected, this test will pass. If not - it will fail. 

Keep in mind that unit testing for console applications can be tricky, as they are often dependent on system resources. Mocking interactions (like we did above) is a common strategy to isolate the parts you want to test.